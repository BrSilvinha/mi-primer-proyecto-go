package main

import (
	"errors"
	"fmt"
	"strings"
	"time"
)

// ===========================================
// FUNCIONES B√ÅSICAS EN GO
// ===========================================

// 1. Funci√≥n simple sin par√°metros ni retorno
func saludar() {
	fmt.Println("¬°Hola desde Go!")
}

// 2. Funci√≥n con par√°metros
func saludarPersona(nombre string) {
	fmt.Printf("¬°Hola, %s!\n", nombre)
}

// 3. Funci√≥n con m√∫ltiples par√°metros del mismo tipo
func sumar(a, b int) int {
	return a + b
}

// 4. Funci√≥n con m√∫ltiples par√°metros de diferentes tipos
func crearMensaje(nombre string, edad int, activo bool) string {
	estado := "inactivo"
	if activo {
		estado = "activo"
	}
	return fmt.Sprintf("Usuario: %s, Edad: %d, Estado: %s", nombre, edad, estado)
}

// 5. Funci√≥n con m√∫ltiples valores de retorno
func dividir(a, b float64) (float64, error) {
	if b == 0 {
		return 0, errors.New("divisi√≥n por cero no permitida")
	}
	return a / b, nil
}

// 6. Funci√≥n con valores de retorno nombrados (named return values)
func analizarTexto(texto string) (palabras int, caracteres int, lineas int) {
	caracteres = len(texto)
	lineas = strings.Count(texto, "\n") + 1
	palabras = len(strings.Fields(texto))
	return // return impl√≠cito cuando los valores est√°n nombrados
}

// 7. Funci√≥n que puede fallar con manejo de errores
func procesarEdad(edad int) (string, error) {
	if edad < 0 {
		return "", errors.New("la edad no puede ser negativa")
	}
	if edad < 18 {
		return "menor de edad", nil
	}
	if edad < 65 {
		return "adulto", nil
	}
	return "adulto mayor", nil
}

// 8. Funci√≥n con l√≥gica de negocio m√°s compleja
func calcularDescuento(precio float64, categoria string, esMiembro bool) (float64, string, error) {
	if precio <= 0 {
		return 0, "", errors.New("el precio debe ser mayor a cero")
	}

	var descuento float64
	var razon string

	// Aplicar descuento por categor√≠a
	switch strings.ToLower(categoria) {
	case "premium":
		descuento = 0.20
		razon = "Descuento Premium 20%"
	case "regular":
		descuento = 0.10
		razon = "Descuento Regular 10%"
	case "basico":
		descuento = 0.05
		razon = "Descuento B√°sico 5%"
	default:
		descuento = 0
		razon = "Sin descuento"
	}

	// Descuento adicional para miembros
	if esMiembro {
		descuento += 0.05
		razon += " + Miembro 5%"
	}

	// Calcular precio final
	precioFinal := precio * (1 - descuento)
	return precioFinal, razon, nil
}

// 9. Funci√≥n con validaciones m√∫ltiples
func validarUsuario(nombre, email string, edad int) error {
	if strings.TrimSpace(nombre) == "" {
		return errors.New("el nombre no puede estar vac√≠o")
	}

	if !strings.Contains(email, "@") || !strings.Contains(email, ".") {
		return errors.New("email inv√°lido")
	}

	if edad < 0 || edad > 120 {
		return errors.New("edad debe estar entre 0 y 120 a√±os")
	}

	return nil
}

// 10. Funci√≥n que demuestra el uso de defer
func operacionConRecursos(archivo string) error {
	fmt.Printf("üìÇ Abriendo archivo: %s\n", archivo)
	
	// Simular apertura de archivo
	defer func() {
		fmt.Printf("üîí Cerrando archivo: %s\n", archivo)
	}()

	// Simular operaciones
	fmt.Printf("üìù Procesando contenido de: %s\n", archivo)
	time.Sleep(100 * time.Millisecond)
	
	// Simular un posible error
	if archivo == "error.txt" {
		return errors.New("error al procesar el archivo")
	}

	fmt.Printf("‚úÖ Archivo procesado exitosamente: %s\n", archivo)
	return nil
}

// ===========================================
// FUNCI√ìN PRINCIPAL PARA DEMOSTRAR EJEMPLOS
// ===========================================

func main() {
	fmt.Println("üöÄ EJEMPLOS DE FUNCIONES B√ÅSICAS EN GO")
	fmt.Println("=" + strings.Repeat("=", 45))

	// 1. Funci√≥n simple
	fmt.Println("\n1Ô∏è‚É£ Funci√≥n simple:")
	saludar()

	// 2. Funci√≥n con par√°metros
	fmt.Println("\n2Ô∏è‚É£ Funci√≥n con par√°metros:")
	saludarPersona("Ana")
	saludarPersona("Carlos")

	// 3. Funci√≥n con retorno
	fmt.Println("\n3Ô∏è‚É£ Funci√≥n con retorno:")
	resultado := sumar(15, 25)
	fmt.Printf("15 + 25 = %d\n", resultado)

	// 4. Funci√≥n con m√∫ltiples par√°metros
	fmt.Println("\n4Ô∏è‚É£ Funci√≥n con m√∫ltiples par√°metros:")
	mensaje := crearMensaje("Mar√≠a", 28, true)
	fmt.Println(mensaje)

	// 5. Funci√≥n con m√∫ltiples retornos y manejo de errores
	fmt.Println("\n5Ô∏è‚É£ Funci√≥n con m√∫ltiples retornos:")
	division, err := dividir(10, 3)
	if err != nil {
		fmt.Printf("‚ùå Error: %v\n", err)
	} else {
		fmt.Printf("10 / 3 = %.2f\n", division)
	}

	// Ejemplo de error
	_, err = dividir(10, 0)
	if err != nil {
		fmt.Printf("‚ùå Error esperado: %v\n", err)
	}

	// 6. Named return values
	fmt.Println("\n6Ô∏è‚É£ Named return values:")
	texto := "Hola mundo\nEste es un ejemplo\nDe m√∫ltiples l√≠neas"
	p, c, l := analizarTexto(texto)
	fmt.Printf("Texto analizado: %d palabras, %d caracteres, %d l√≠neas\n", p, c, l)

	// 7. Funci√≥n con validaci√≥n
	fmt.Println("\n7Ô∏è‚É£ Funci√≥n con validaci√≥n:")
	edades := []int{-5, 10, 25, 70}
	for _, edad := range edades {
		categoria, err := procesarEdad(edad)
		if err != nil {
			fmt.Printf("Edad %d: ‚ùå %v\n", edad, err)
		} else {
			fmt.Printf("Edad %d: %s\n", edad, categoria)
		}
	}

	// 8. Funci√≥n con l√≥gica de negocio compleja
	fmt.Println("\n8Ô∏è‚É£ C√°lculo de descuentos:")
	productos := []struct {
		precio    float64
		categoria string
		miembro   bool
	}{
		{100.0, "premium", true},
		{50.0, "regular", false},
		{25.0, "basico", true},
		{200.0, "vip", false},
	}

	for i, prod := range productos {
		precioFinal, razon, err := calcularDescuento(prod.precio, prod.categoria, prod.miembro)
		if err != nil {
			fmt.Printf("Producto %d: ‚ùå %v\n", i+1, err)
		} else {
			fmt.Printf("Producto %d: $%.2f ‚Üí $%.2f (%s)\n", i+1, prod.precio, precioFinal, razon)
		}
	}

	// 9. Validaci√≥n de usuarios
	fmt.Println("\n9Ô∏è‚É£ Validaci√≥n de usuarios:")
	usuarios := []struct {
		nombre string
		email  string
		edad   int
	}{
		{"Juan P√©rez", "juan@email.com", 30},
		{"", "invalido@", 25},
		{"Mar√≠a Garc√≠a", "maria@empresa.com", -5},
		{"Pedro L√≥pez", "pedro@test.com.ar", 45},
	}

	for i, usuario := range usuarios {
		err := validarUsuario(usuario.nombre, usuario.email, usuario.edad)
		if err != nil {
			fmt.Printf("Usuario %d: ‚ùå %v\n", i+1, err)
		} else {
			fmt.Printf("Usuario %d: ‚úÖ V√°lido - %s\n", i+1, usuario.nombre)
		}
	}

	// 10. Funci√≥n con defer
	fmt.Println("\nüîü Funci√≥n con defer (manejo de recursos):")
	archivos := []string{"datos.txt", "config.json", "error.txt", "backup.sql"}
	
	for _, archivo := range archivos {
		fmt.Printf("\nüìã Procesando: %s\n", archivo)
		err := operacionConRecursos(archivo)
		if err != nil {
			fmt.Printf("‚ùå Error: %v\n", err)
		}
	}

	fmt.Println("\nüéØ CONCEPTOS DEMOSTRADOS:")
	fmt.Println("‚úÖ Declaraci√≥n de funciones con diferentes signaturas")
	fmt.Println("‚úÖ Par√°metros m√∫ltiples del mismo y diferentes tipos")
	fmt.Println("‚úÖ Valores de retorno simples y m√∫ltiples")
	fmt.Println("‚úÖ Named return values para claridad")
	fmt.Println("‚úÖ Manejo apropiado de errores")
	fmt.Println("‚úÖ Validaciones y l√≥gica de negocio")
	fmt.Println("‚úÖ Uso de defer para limpieza de recursos")
}